---
# Add tasks to automate the steps done during weeks 5 and 6 here
# Use the defaults/ and files/ directories too
- name: Create the docker_compose_lamp directory
  ansible.builtin.file:
    path: "{{ repo_dest }}"
    state: directory

- name: Read-write project repository from GitHub (weeks 5 and 6)
  ansible.builtin.git:
    repo: https://github.com/EdgeKing810/interns-docker-compose-lamp.git
    dest: "{{ repo_dest }}"
    force: yes

# Check if the .env file exists
- name: Check if the .env file exists
  ansible.builtin.stat:
    path: "{{ repo_dest }}/.env"
  register: env_file_exists

- name: Does the ENV Sample Exist
  ansible.builtin.stat:
    path: "{{ repo_dest }}/.env.sample"
  register: checkTheENVSample

- name: Rename the ENV File
  become: true
  ansible.builtin.copy:
    src: "{{ repo_dest }}/.env.sample"
    dest: "{{ repo_dest }}/.env"
    remote_src: true
  when: checkTheENVSample.stat.exists

- name: Remove the old ENV File
  ansible.builtin.file:
    path: "{{ repo_dest }}/.env.sample"
    state: absent
  when: checkTheENVSample.stat.exists

- name: Check if Dockerfile exists in the source
  ansible.builtin.stat:
    path: /home/lubna/interns-ansible-automation/playbooks/files/Dockerfile
  register: dockerfile_check

- name: Replace Dockerfile content in webserver
  become: true
  ansible.builtin.copy:
    src: /home/lubna/interns-ansible-automation/playbooks/files/Dockerfile #guet simtysha
    dest: "{{ repo_dest }}/bin/webserver/Dockerfile"
    remote_src: true
  when: dockerfile_check.stat.exists

- name: Move docker-compose.yml file
  become: true
  ansible.builtin.copy:
    src: docker-compose.yml
    dest: "{{ repo_dest }}/docker-compose.yml"

# Check if the repository is already cloned
- name: Check if the repository is already cloned
  ansible.builtin.stat:
    path: "{{ repo_dest }}/.git"
  register: repo_exists

# Generate random passwords if the repository is not cloned
- name: Generate random passwords
  ansible.builtin.set_fact:
    db_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"
    db_root_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
  when: not env_file_exists.stat.exists

- name: configuring the database 
  ansible.builtin.set_fact:
    env_variables:
      DB_NAME: "{{ db_name }}"
      DB_USERNAME: "{{ db_username }}"
      #DB_USER: "{{ db_username }}"
      DB_PASSWORD: "{{ db_password }}"
      DB_ROOT_PASSWORD: "{{ db_root_password }}"
      #DB_DATABASE: "{{ db_name }}"

# Add specific environment variables to .env
- name: Add specific environment variables to .env
  ansible.builtin.lineinfile:
    path: "{{ repo_dest }}/.env"
    line: "{{ item.key }}={{ item.value }}"
    create: yes
  loop: "{{ env_variables | dict2items }}"
  when: not env_file_exists.stat.exists


# Update DB username and password in index.php if repo doesn't exist
- name: Update DB username
  ansible.builtin.replace:
    path: "{{ repo_dest }}/webroot/index.php"
    regexp: 'root'
    replace: '{{ db_username }}'
  when: not env_file_exists.stat.exists

- name: Update DB password in index.php
  ansible.builtin.replace:
    path: "{{ repo_dest }}/webroot/index.php"
    regexp: 'tiger'
    replace: '{{ db_password }}'
  when: not env_file_exists.stat.exists

# Check if docker-compose.yml exists
- name: Debug - Check if docker-compose.yml exists
  ansible.builtin.stat:
    path: "{{ repo_dest }}/docker-compose.yml"
  register: docker_compose_yml_check

- debug:
    msg: "docker-compose.yml exists: {{ docker_compose_yml_check.stat.exists }}"

# Run docker-compose to start the services
- name: Run docker-compose to start the services
  become: true
  command:
    cmd: docker-compose up -d
    chdir: "{{ repo_dest }}"
  when: docker_compose_yml_check.stat.exists
